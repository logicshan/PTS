let Bool:* = (a:*)->a->a->a;
    True:Bool = \a:*. \x:a. \y:a. x;
    False:Bool = \a:*. \x:a. \y:a. y;
    if:(a:*)->Bool->a->a->a = \a:*. \b:Bool. \t:a. \f:a. b a t f;
    not:Bool->Bool = \b:Bool. if Bool b False True;
    and:Bool->Bool->Bool = \x:Bool. \y:Bool. if Bool x y False;
    or:Bool->Bool->Bool = \x:Bool. \y:Bool. if Bool x True y;
    Integer:*;
    0:Integer;
    1:Integer;
    2:Integer;
    3:Integer;
    primIntegerAdd:Integer->Integer->Integer;
    primIntegerSub:Integer->Integer->Integer;
    primIntegerMul:Integer->Integer->Integer;
    primIntegerDiv:Integer->Integer->Integer;
    primIntegerEq:Integer->Integer->Bool;
    id:(a:*)->a->a = \a:*. \x:a. x;
    const:(a:*)->(b:*)->a->b->a = \a:*. \b:*. \x:a. \y:b. x;
    Pair:*->*->* = \a:*. \b:*. (c:*)->(a->b->c)->c;
    pair:(a:*)->(b:*)->a->b->Pair a b =
        \a:*. \b:*. \x:a. \y:b. \c:*. \f:a->b->c. f x y;
    split:(a:*)->(b:*)->(r:*)->(a->b->r)->Pair a b->r =
        \a:*. \b:*. \r:*. \f:a->b->r. \p:Pair a b. p r f;
    fst:(a:*)->(b:*)->Pair a b->a =
        \a:*. \b:*. \p:Pair a b. split a b a (\x:a. \y:b. x) p;
    snd:(a:*)->(b:*)->Pair a b->b =
        \a:*. \b:*. \p:Pair a b. split a b b (\x:a. \y:b. y) p;
    Nat:* = (a:*)->(a->a)->a->a;
    zero:Nat = \a:*. \s:a->a. \z:a. z;
    succ:Nat->Nat = \n:Nat. \a:*. \s:a->a. \z:a. s (n a s z);
    add:Nat->Nat->Nat = \x:Nat. \y:Nat. x Nat (\r:Nat. succ r) y;
    isZero:Nat->Bool = \n:Nat. n Bool (\a:Bool. False) True;
    pred:Nat->Nat =
        \n:Nat.
        fst Nat Bool (n (Pair Nat Bool) (\nb:Pair Nat Bool.
                                         pair Nat Bool (nb Nat (\n:Nat.
                                                                \b:Bool.
                                                                if Nat b (succ n) zero)) True) (pair Nat Bool zero False));
    one:Nat = succ zero;
    two:Nat = succ one;
    List:*->* = \e:*. (a:*)->(e->a->a)->a->a;
    nil:(e:*)->List e = \e:*. \a:*. \c:e->a->a. \n:a. n;
    cons:(e:*)->e->List e->List e =
        \e:*. \x:e. \xs:List e. \a:*. \c:e->a->a. \n:a. c x (xs a c n);
    foldr:(a:*)->(b:*)->(a->b->b)->b->List a->b =
        \a:*. \b:*. \f:a->b->b. \z:b. \xs:List a. xs b f z;
    map:(a:*)->(b:*)->(a->b)->List a->List b =
        \a:*.
        \b:*.
        \f:a->b.
        \xs:List a.
        foldr a (List b) (\x:a. \r:List b. cons b (f x) r) (nil b) xs;
    Either:*->*->* = \a:*. \b:*. (r:*)->(a->r)->(b->r)->r;
    Left:(a:*)->(b:*)->a->Either a b =
        \a:*. \b:*. \x:a. \r:*. \left:a->r. \right:b->r. left x;
    Right:(a:*)->(b:*)->b->Either a b =
        \a:*. \b:*. \y:b. \r:*. \left:a->r. \right:b->r. right y;
    either:(a:*)->(b:*)->(r:*)->Either a b->(a->r)->(b->r)->r =
        \a:*.
        \b:*. \r:*. \s:Either a b. \left:a->r. \right:b->r. s r left right;
    Void:* = (r:*)->r;
    void:(r:*)->Void->r = \r:*. \v:Void. v r;
    toInteger:Nat->Integer =
        \n:Nat.
        if Integer (isZero n) 0 (if Integer (isZero (pred n)) 1 (if Integer (isZero (pred (pred n))) 2 (if Integer (isZero (pred (pred (pred n)))) 3 0)));
    l:List Nat = cons Nat one (cons Nat two (nil Nat));
    sum:List Nat->Nat = \xs:List Nat. foldr Nat Nat add zero xs
in  toInteger (sum l)

 : (Integer:*)->Integer->Integer->Integer->Integer->(Integer->Integer->Integer)->(Integer->Integer->Integer)->(Integer->Integer->Integer)->(Integer->Integer->Integer)->(Integer->Integer->(a:*)->a->a->a)->Integer
 = 
\Integer:*.
\0:Integer.
\1:Integer.
\2:Integer.
\3:Integer.
\primIntegerAdd:Integer->Integer->Integer.
\primIntegerSub:Integer->Integer->Integer.
\primIntegerMul:Integer->Integer->Integer.
\primIntegerDiv:Integer->Integer->Integer.
\primIntegerEq:Integer->Integer->(a:*)->a->a->a. 3
 === 
3
